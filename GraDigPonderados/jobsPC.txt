10
41.0  3  1 7 9   listo
51.0  1  2      listo
50.0  0         listo
36.0  0         listo   
38.0  0         listo
45.0  0         listo
21.0  2  3 8
32.0  2  3 8
32.0  1  2
29.0  2  4 6
  




int N = StdIn.readInt();
int inicio = 2*N;
  int fin   = 2*N + 1;
DigrafoAristaPonderada G = new DigrafoAristaPonderada(2*N + 2);
for (int i = 0; i < N; i++) {
            double duracion = StdIn.readDouble();
            G.agregarArista(new AristaDirigida(inicio, i, 0.0));
            G.agregarArista(new AristaDirigida(i+N, fin, 0.0));
            G.agregarArista(new AristaDirigida(i, i+N,    duracion));

            // precedence constraints
            int M = StdIn.readInt();
            for (int j = 0; j < M; j++) {
                int precedente = StdIn.readInt();
                G.agregarArista(new AristaDirigida(N+i, precedente, 0.0));
            }


  double duracion = 41.0;
            G.agregarArista(new AristaDirigida(inicio, 0, 0.0));
            G.agregarArista(new AristaDirigida(10, fin, 0.0));
            G.agregarArista(new AristaDirigida(0,10,duracion));
            //3 datos
                G.agregarArista(new AristaDirigida(10,1, 0.0));
                G.agregarArista(new AristaDirigida(10, 7, 0.0));
                G.agregarArista(new AristaDirigida(10, 9, 0.0));
       double duracion2 = 51.0;
            G.agregarArista(new AristaDirigida(inicio, 1, 0.0));
            G.agregarArista(new AristaDirigida(11, fin, 0.0));
            G.agregarArista(new AristaDirigida(1,11,duracion2));
               //1 dato
                G.agregarArista(new AristaDirigida(11,2, 0.0));
                
        double duracion3 = 50.0;
            G.agregarArista(new AristaDirigida(inicio, 2, 0.0));
            G.agregarArista(new AristaDirigida(12, fin, 0.0));
            G.agregarArista(new AristaDirigida(2,12,duracion3));
          
        double duracion4 = 36.0;
            G.agregarArista(new AristaDirigida(inicio, 3, 0.0));
            G.agregarArista(new AristaDirigida(13, fin, 0.0));
            G.agregarArista(new AristaDirigida(3,13,duracion4));
        double duracion5 = 38.0;
            G.agregarArista(new AristaDirigida(inicio, 4, 0.0));
            G.agregarArista(new AristaDirigida(14, fin, 0.0));
            G.agregarArista(new AristaDirigida(4,14,    duracion5));
        double duracion6 = 45.0;
            G.agregarArista(new AristaDirigida(inicio, 5, 0.0));
            G.agregarArista(new AristaDirigida(15, fin, 0.0));
            G.agregarArista(new AristaDirigida(5,15,    duracion6));
            
        double duracion7 = 21.0;
            G.agregarArista(new AristaDirigida(inicio, 6, 0.0));
            G.agregarArista(new AristaDirigida(16, fin, 0.0));
            G.agregarArista(new AristaDirigida(6,16,    duracion7));
            // 2 datos
               G.agregarArista(new AristaDirigida(16,3, 0.0));
                G.agregarArista(new AristaDirigida(16, 8, 0.0));
        double duracion8 = 32.0;
            G.agregarArista(new AristaDirigida(inicio, 7, 0.0));
            G.agregarArista(new AristaDirigida(17, fin, 0.0));
            G.agregarArista(new AristaDirigida(7,17,    duracion8));
            // 2 datos
               G.agregarArista(new AristaDirigida(17,3, 0.0));
                G.agregarArista(new AristaDirigida(17, 8, 0.0));
        double duracion9 = 32.0;
            G.agregarArista(new AristaDirigida(inicio, 8, 0.0));
            G.agregarArista(new AristaDirigida(18, fin, 0.0));
            G.agregarArista(new AristaDirigida(8,18,    duracion9));
            // 1 dato
               G.agregarArista(new AristaDirigida(18,2, 0.0));
        double duracion10 = 29.0;
            G.agregarArista(new AristaDirigida(inicio, 9, 0.0));
            G.agregarArista(new AristaDirigida(19, fin, 0.0));
            G.agregarArista(new AristaDirigida(9,19,    duracion8));
            // 2 datos
               G.agregarArista(new AristaDirigida(19,4, 0.0));
                G.agregarArista(new AristaDirigida(19,6, 0.0));